<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">

<sqlMap namespace="bad1000DAO">
	<typeAlias alias="egovMap"      type="egovframework.rte.psl.dataaccess.util.EgovMap"/>
	<typeAlias alias="bad1000VO"	type="kr.opensoftlab.oslops.bad.bad1000.bad1000.vo.Bad1000VO"/>
	
	<resultMap id="resultMapSelectBad1000VO" class="bad1000VO">
		<result property="rn"  			column="RN"/>
		<result property="badId"     	column="BAD_ID" /> 
		<result property="badNum"    	column="BAD_NUM" />  
		<result property="badTitle"     column="BAD_TITLE" />  
		<result property="badContent"   column="BAD_CONTENT" /> 
		<result property="badCnt"  		column="BAD_CNT"/>
		<result property="usrId"  		column="USR_ID"/>
		<result property="usrNm"  		column="USR_NM"/>
		<result property="noticeYn"  	column="NOTICE_YN"/>
		<result property="noticeNm"  	column="NOTICE_NM"/>
		<result property="usrPositionCdNm"  	column="USR_POSITION_CD_NM"/>
		<result property="regDtm"  	column="REG_DTM"/>
		<result property="modifyDtm"  	column="MODIFY_DTM"/>
    </resultMap>

	<!-- sql Define  -->
	<!-- 공지사항 목록 조회 -->
	<sql id="selectBad1000List">
	
		<![CDATA[
			SELECT	 X.BAD_ID 
					,X.BAD_NUM
					,X.BAD_TITLE
					,COALESCE(X.BAD_CONTENT, SF_REPLACE_ALL(X.BAD_CONTENT ,'</br>|<br>|<br/>|</BR>|<BR>|<BR/>' , '' ), ' ')  AS BAD_CONTENT /* 글내용 */ 
					,X.BAD_CNT  
					,X.USR_ID 
					,X.USR_NM 
					,( SELECT SUB_CD_NM FROM ADM4100 WHERE LIC_GRP_ID = #licGrpId# AND MST_CD = 'ADM00007' AND SUB_CD = X.USR_POSITION_CD ) AS USR_POSITION_CD_NM
					,X.REG_DTM 
					,X.REG_USR_ID
					,X.REG_USR_IP 
					,X.MODIFY_DTM
					,X.MODIFY_USR_ID
					,X.MODIFY_USR_IP 
					,X.NOTICE_NM
					,X.NOTICE_YN
		FROM (
				SELECT
			            T.BAD_ID              /* 공지사항 코드 */ 
					,	T.BAD_NUM             /* 글번호 */ 
			        ,	T.BAD_TITLE           /* 글제목 */ 
			        ,	T.BAD_CONTENT /* 글내용 */ 
			        ,	T.BAD_CNT                 /* 조회수 */
			        ,	T.USR_ID 				/* 사용자 아이디*/
			        ,	T.USR_NM 				/* 사용자 이름*/
					,	TO_CHAR(T.REG_DTM, 'YYYY-MM-DD HH24:MI:SS') AS REG_DTM    /* 최초등록 일시 */ 
			        ,	T.REG_USR_ID              /* 최초등록자 ID */ 
			        ,	T.REG_USR_IP              /* 최초등록자 IP */ 
			        ,	TO_CHAR(T.MODIFY_DTM, 'YYYY-MM-DD HH24:MI:SS') AS MODIFY_DTM
			        ,	T.MODIFY_USR_ID           /* 최종수정자 ID */ 
			        ,	T.MODIFY_USR_IP           /* 최종수정자 IP */ 
			        ,   DECODE(T.NOTICE_YN,'Y','공지','N','')	 AS NOTICE_NM/* 공지사항 여부 */ 
			        ,   T.NOTICE_YN 			/* 공지사항 여부 */ 
			        ,	T2.USR_POSITION_CD
				FROM BAD1000 T
				LEFT JOIN ADM2000 T2
				ON ( T2.LIC_GRP_ID = T.LIC_GRP_ID AND T2.USR_ID = T.USR_ID )
				WHERE   1=1
				AND		T.LIC_GRP_ID = #licGrpId#
			]]>
			<isNotEmpty property="searchSelect">
				<isNotEmpty property="searchTxt">
				<isEqual property="searchSelect" compareValue="badNum"> 
					AND		UPPER( T.BAD_NUM ) like '%'|| UPPER( #searchTxt# ) ||'%'
				</isEqual>
				<isEqual property="searchSelect" compareValue="badTitle"> 
					AND		UPPER( T.BAD_TITLE )  like '%'|| UPPER( #searchTxt#  ) ||'%'
				</isEqual>
				<isEqual property="searchSelect" compareValue="usrId"> 
					AND		UPPER( T.USR_ID )  like '%'|| UPPER( #searchTxt#  ) ||'%'
				</isEqual>
				<isEqual property="searchSelect" compareValue="usrNm"> 
					AND		UPPER( T.USR_NM )  like '%'|| UPPER( #searchTxt#  ) ||'%'
				</isEqual>
				</isNotEmpty>
			</isNotEmpty>
			<isNotEmpty property="searchSelect">
					<isNotEmpty property="searchCd">
						<isEqual property="searchSelect" compareValue="usrPositionCd">
							AND 	T2.USR_POSITION_CD = #searchCd#
						</isEqual>
					</isNotEmpty>
				</isNotEmpty>
			<isNotEmpty property="srchFromDt">
					AND T.REG_DTM &gt;= TO_DATETIME(#srchFromDt# || ' 00:00:00' , 'YYYY-MM-DD HH24:MI:SS')
			</isNotEmpty>
			<isNotEmpty property="srchToDt">
					AND T.REG_DTM &lt;= TO_DATETIME(#srchToDt# || ' 23:59:59', 'YYYY-MM-DD HH24:MI:SS')
			</isNotEmpty>
			ORDER BY T.NOTICE_YN DESC ,T.REG_DTM DESC
		) X
    </sql>
    		
    
    <!-- 공지사항 목록 조회 -->
    <select id="bad1000DAO.selectbad1000BoardList" parameterClass="bad1000VO"  resultMap="resultMapSelectBad1000VO">
	    /*bad1000DAO.selectbad1000BoardList 공지사항 목록 조회 */
		SELECT *
		FROM
			(
    		SELECT ROWNUM RN,
    			   A.*
    		FROM
    		(
					<include refid="selectBad1000List"/>
	    			) A
	    	)
	    	 WHERE RN BETWEEN (#firstIndex#+1) AND #lastIndex#
    </select>
    
    <!-- 공지사항 목록 총건수. :페이징 처리 부분 -->
    <select id="bad1000DAO.selectbad1000BoardListCnt" parameterClass="bad1000VO"  resultClass="java.lang.Integer">
	    /*bad1000DAO.selectbad1000BoardListCnt 목록 총건수를 조회*/
	    	SELECT
					COUNT(*)
			FROM	(
						<include refid="selectBad1000List"/>
					) A
    </select>
    
    <!--  공지사항 정보 조회(단건)  --> 
	<select id="bad1000DAO.selectBad1001Info" parameterClass="java.util.Map"  resultClass="egovMap">
		/* bad1000DAO.selectBad1001Info -  공지사항 정보 단건 조회 */
		SELECT T1.*
		FROM	(
					<include refid="selectBad1000List"/>
				) T1
		WHERE 1=1
		AND BAD_ID = #badId# 
	</select>
	
	<!-- 조회수 정보 수정 -->
	<update id="bad1000DAO.updateBad1001CntInfo" parameterClass="java.util.Map">
		/* bad1000DAO.updateBad1001CntInfo 조회수 정보 수정 */ 
			 UPDATE     BAD1000     SET 
			            BAD_CNT = TO_CHAR(BAD_CNT + 1)  
			WHERE	1=1
          	AND 		LIC_GRP_ID = #licGrpId#
          	AND   		BAD_ID = #badId#            
	</update>
	
	<!-- 공지사항 정보 수정 -->
	<update id="bad1000DAO.updateBad1001Info" parameterClass="java.util.Map">
		/* bad1000DAO.updateBad1001Info 공지사항  정보 수정 */ 
			 UPDATE     BAD1000     SET 
			            BAD_TITLE = #badTitle#
			           ,BAD_CONTENT = #badContent#
			           ,USR_ID = #usrId#
			           ,NOTICE_YN = #noticeYn#
			           ,MODIFY_USR_ID = #modifyUsrId#
			           ,MODIFY_DTM = CURRENT_TIMESTAMP
			           ,MODIFY_USR_IP = #modifyUsrIp#
			WHERE	1=1
          	AND 		LIC_GRP_ID = #licGrpId#
          	AND   		BAD_ID = #badId#            
	</update>
	
	<!-- 새로운 공지사항을 등록한다. -->
    <insert id="bad1000DAO.InsertBad1001Info" parameterClass="java.util.Map">
		<selectKey resultClass="java.lang.String" keyProperty="newBadId">
		<![CDATA[
			/* bad1000DAO.InsertBad1001Info - 공지사항 등록(새로운 NEW_BAD_ID와  NEW_BAD_NUM 얻기)*/ 
			SELECT	COALESCE( 
							SUBSTR(NEW_BAD_ID, 1, 11) || LPAD( (TO_NUMBER(SUBSTR(NEW_BAD_ID, 12, 5)) + 1) , 5, '0')
						,	'BAD' || TO_CHAR(CURRENT_TIMESTAMP, 'YYYYMMDD') || '00001'
            		) AS NEW_BAD_ID 
			FROM	(
			            SELECT	MAX(BAD_ID)  AS NEW_BAD_ID
			            FROM	BAD1000 
			            WHERE	1=1
			            AND		BAD_ID LIKE 'BAD' || TO_CHAR(CURRENT_TIMESTAMP, 'YYYYMMDD') || '%'
					) X
		]]>
		</selectKey>
		<![CDATA[ 
			/* bad1000DAO.InsertBad1001Info  - 공지사항을 등록한다. */ 
			INSERT INTO BAD1000
			(
				BAD_ID,
				LIC_GRP_ID,
				BAD_NUM,
				BAD_TITLE,
				BAD_CONTENT,
				BAD_CNT,
				NOTICE_YN,
				USR_ID,
				USR_NM,
				REG_DTM,
				MODIFY_DTM,
				REG_USR_ID,
				MODIFY_USR_ID,
				REG_USR_IP,
				MODIFY_USR_IP
			)
			VALUES
			(
				#newBadId#,
				#licGrpId#, 	 
				(   
					SELECT COALESCE( TO_CHAR(MAX(BAD_NUM)+1), 1)
					FROM   BAD1000
					WHERE LIC_GRP_ID = #licGrpId#
				), 		
				#badTitle#, 
				#badContent#, 	
				'0',		
				#noticeYn#, 	
				#usrId#, 
				#usrNm#,
				CURRENT_TIMESTAMP,
				CURRENT_TIMESTAMP,
				#regUsrId#,		
				#modifyUsrId#, 
				#regUsrIp#, 	
				#modifyUsrIp#
			)
		]]>
	</insert>
	
	<!-- 공지사항 글 삭제 -->
	<delete id="bad1000DAO.deleteBad1000Info" parameterClass="java.util.Map">
		/* bad1000DAO.deleteBad1000Info - 공지사항 글을 삭제한다. */ 
		DELETE FROM	BAD1000
		WHERE	1=1
        AND 	LIC_GRP_ID = #licGrpId#
		AND   	BAD_ID = #badId#		/* badId 코드 */ 
	</delete>
	
</sqlMap>