<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">

<sqlMap namespace="adm5000DAO">
	 <!--  in / out class define  -->
    <typeAlias alias="adm5000VO"	type="kr.opensoftlab.oslops.adm.adm5000.adm5000.vo.Adm5000VO"/>
	<typeAlias alias="egovMap"	 	type="egovframework.rte.psl.dataaccess.util.EgovMap"/>
	
	<!-- Map Define -->
   	<resultMap id="resultMapSelectAdm5000" class="adm5000VO">
			<result property="rn"			column="RN"/>
			<result property="licGrpId"     column="LIC_GRP_ID"/>
			<result property="loginUsrId"   column="LOGIN_USR_ID"/>
			<result property="loginTime"    column="LOGIN_TIME"/>
			<result property="logoutTime"   column="LOGOUT_TIME"/>
			<result property="loginIp"      column="LOGIN_IP"/>
			<result property="loginStatus"  column="LOGIN_STATUS"/>
			<result property="loginUsrNm"   column="USR_NM"/>
    </resultMap>
	
	<!-- sql Define  -->
	<!-- 로그인 이력 로그 목록 조회 -->
	<sql id="selectAdm5000List">
		SELECT 
				T1.LIC_GRP_ID
			,	T1.LOGIN_USR_ID
			, 	TO_CHAR(T1.LOGIN_TIME,'YYYY-MM-DD HH24:MI:SS') AS LOGIN_TIME /* 로그인 일시 */
			, 	TO_CHAR(T1.LOGOUT_TIME,'YYYY-MM-DD HH24:MI:SS') AS LOGOUT_TIME /* 로그아웃 일시 */
			,	T1.LOGIN_IP
			,	T2.USR_NM
			,	DECODE(T1.LOGIN_STATUS, 'SUCCESS', '성공', 'FAIL', '실패' ) AS LOGIN_STATUS
		FROM ADM5000 T1 
		INNER JOIN ADM2000 T2 
		ON ( T1.LOGIN_USR_ID = T2.USR_ID AND T1.LIC_GRP_ID = T2.LIC_GRP_ID )
		WHERE 1=1
		AND	T1.LIC_GRP_ID = #licGrpId#
		<isNotEmpty property="searchSelect">
			<isEqual property="searchSelect" compareValue="usrNm" prepend="AND" >
				T2.USR_NM LIKE '%'||#searchTxt#||'%' 
			</isEqual>
			<isEqual property="searchSelect" compareValue="loginIp" prepend="AND">
				T1.LOGIN_IP LIKE '%'||#searchTxt#||'%'
			</isEqual>
			<isEqual property="searchSelect" compareValue="usrId" prepend="AND">
				T1.LOGIN_USR_ID LIKE '%'||#searchTxt#||'%'
			</isEqual>
			<isEqual property="searchSelect" compareValue="licGrpId" prepend="AND">
				T1.LIC_GRP_ID LIKE '%'||#searchTxt#||'%'
			</isEqual>
		</isNotEmpty>
		<isNotEmpty property="srchFromDt">
			AND T1.LOGIN_TIME &gt;= TO_DATE(#srchFromDt#, 'YYYY-MM-DD')
		</isNotEmpty>
		<isNotEmpty property="srchToDt">
			AND T1.LOGIN_TIME &lt;=   TO_DATE(#srchToDt#, 'YYYY-MM-DD') + 1
		</isNotEmpty>
		ORDER BY  T1.LOGIN_TIME DESC
    </sql>
    
    <!-- 로그인 이력 로그 목록 조회 -->
    <select id="adm5000DAO.selectAdm5000List" parameterClass="adm5000VO"  resultClass="egovMap">
	    /*adm5000DAO.selectAdm5000List 로그인 이력 로그 목록을 조회한다.*/
		SELECT *
		FROM
			(
    		SELECT ROWNUM RN,
    			     A.*
    		FROM
    		(
					<include refid="selectAdm5000List"/>
	    			) A
	    	)
	    	WHERE RN BETWEEN (#firstIndex#+1) AND #lastIndex#
    </select>
    
    <!-- 로그인 이력 로그 목록 총건수. :페이징 처리 부분 -->
    <select id="adm5000DAO.selectAdm5000ListCnt" parameterClass="adm5000VO"  resultClass="java.lang.Integer">
	    /*adm5000DAO.selectAdm5000ListCnt 로그인 이력 로그 목록 총건수를 조회한다.*/
	    SELECT
			COUNT(*)
		FROM	(
			<include refid="selectAdm5000List"/>
						) A
    </select>
    
    
        <!-- 로그인 이력 로그 목록 엑셀 조회 -->
    <select id="adm5000DAO.selectAdm5000ExcelList" parameterClass="adm5000VO"  resultClass="egovMap">
	    /*adm5000DAO.selectAdm5000ExcelList 로그인 이력 로그 목록을 조회한다.*/
		<include refid="selectAdm5000List"/>
    </select>

	<!-- 로그인 이력 쌓기 -->
	<insert id="adm5000DAO.insertAdm5000AuthLoginLog" parameterClass="adm5000VO">
		<![CDATA[ 
			/* adm5000DAO.insertAdm5000AuthLoginLog - 로그인 이력 쌓기  */
			INSERT INTO ADM5000
            (	
            	LIC_GRP_ID,		LOGIN_USR_ID,	LOGIN_TIME,		LOGOUT_TIME,		
            	LOGIN_IP,		LOGIN_STATUS
            )
            VALUES
            (
            	#licGrpId#,		#loginUsrId#,		CURRENT_TIMESTAMP,		NULL,
            	#loginIp#,      #loginStatus#
            )
		]]>
	</insert>
	
	<!-- 로그인 이력에 로그아웃 시간 넣기-->
	<update id="adm5000DAO.updateAdm5000AuthLogoutLog" parameterClass="adm5000VO">
	<![CDATA[
		/* adm5000DAO.updateAdm5000AuthLogoutLog - 로그인 이력에 로그아웃 시간 넣기 */
		UPDATE ADM5000 A SET
			A.LOGOUT_TIME = CURRENT_TIMESTAMP
		WHERE 1=1
		AND A.LIC_GRP_ID = #licGrpId#
		AND	A.LOGIN_USR_ID = #loginUsrId#
		AND A.LOGOUT_TIME IS NULL
		AND A.LOGIN_TIME = (
						 SELECT MAX(Z.LOGIN_TIME) 
						 FROM ADM5000 Z
					     WHERE 1=1
					     AND Z.LIC_GRP_ID = #licGrpId#
					     AND Z.LOGIN_USR_ID = #loginUsrId#
					     AND Z.LOGOUT_TIME IS NULL
						)
	]]>
	</update>
	
	
	<!-- 계정 사용기간 체크를 위한 마지막 로그인 이력 조회  -->
    <select id="adm5000DAO.selectAdm5000LastLogin" parameterClass="java.util.Map" resultClass="egovMap">
	    /* adm5000DAO.selectAdm5000LastLogin 계정 사용기간 체크를 위한 마지막 로그인 이력 조회 */
		SELECT
				 COALESCE(TO_CHAR(MAX(T1.LOGIN_TIME),'YYYY-MM-DD HH24:MI:SS'), TO_CHAR(CURRENT_TIMESTAMP,'YYYY-MM-DD HH24:MI:SS') ) AS LOGIN_TIME 
		FROM ADM5000 T1
		INNER JOIN ADM2000 T2
		ON ( T1.LOGIN_USR_ID = T2.USR_ID AND T1.LIC_GRP_ID = T2.LIC_GRP_ID )
		WHERE 1=1
		AND		T1.LIC_GRP_ID		= #licGrpId#
        AND	  	T1.LOGIN_USR_ID 	= #usrId#
    </select>
	
	
	<!-- 사용자의 최근 로그인 이력 조회 -->
	 <select id="adm5000DAO.selectAdm5000RecentLogin" parameterClass="java.util.Map" resultClass="egovMap">
	    /* adm5000DAO.selectAdm5000RecentLogin 사용자의 최근 로그인 이력 조회  */
		SELECT 
				MAX(T.REC_LOGIN_TIME) AS LOGIN_TIME 
		FROM
		(
			SELECT 
            		TO_CHAR(LEAD(T1.LOGIN_TIME) OVER(ORDER BY T1.LOGIN_TIME DESC ),'YYYY-MM-DD HH24:MI:SS') AS REC_LOGIN_TIME
			FROM ADM5000 T1
			INNER JOIN ADM2000 T2
			ON ( T1.LOGIN_USR_ID = T2.USR_ID AND T1.LIC_GRP_ID = T2.LIC_GRP_ID)
			WHERE 1=1
			AND	T1.LIC_GRP_ID	= #licGrpId#
			AND	T1.LOGIN_USR_ID = #usrId#
    	) T
    </select>
	
</sqlMap>